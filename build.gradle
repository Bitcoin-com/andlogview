/*
 * Copyright 2015 Mikhail Lopatkin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            // TODO(mlopatkin) switch to JCenter
            url 'https://dl.bintray.com/mlopatkin/bitbucket-plugin'
        }
        jcenter()
    }
    dependencies {
        classpath 'net.ltgt.gradle:gradle-apt-plugin:0.13'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath 'name.mlopatkin.bitbucket:gradle-plugin:0.2'
    }
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'net.ltgt.apt'
apply plugin: 'idea'
apply plugin: 'net.ltgt.apt-idea'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

apply plugin: 'name.mlopatkin.bitbucket'

repositories {
    jcenter()
    google()
}

def daggerVersion = '2.16'

dependencies {
    compile "com.google.dagger:dagger:${daggerVersion}"
    compile 'com.google.guava:guava:25.1-jre'
    compile 'com.google.code.gson:gson:2.8.5'
    compile 'log4j:log4j:1.2.17'
    compile 'net.sf.jopt-simple:jopt-simple:4.6'
    compile 'com.android.tools.ddms:ddmlib:26.1.3'

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.19.1'
    testCompile 'org.hamcrest:hamcrest-all:1.3'

    apt "com.google.dagger:dagger-compiler:${daggerVersion}"
}

import org.bitbucket.mlopatkin.android.logviewer.building.GenerateBuildMetadata

checkstyle {
    toolVersion = '8.11'
}

applicationName = 'logview'
version = '0.19'
mainClassName = 'org.bitbucket.mlopatkin.android.logviewer.Main'

def javaVersion = JavaVersion.VERSION_1_8
sourceCompatibility = javaVersion
targetCompatibility = javaVersion // defaults to sourceCompatibility

def metadataBuildDir = "$buildDir/generated/source/metadata"

sourceSets {
    main {
        java {
            srcDir 'src'
            srcDir 'utils'
            srcDir metadataBuildDir
        }
        resources {
            srcDir 'resources'
        }
    }
    test {
        java {
            srcDir 'test'
        }
        resources {
            srcDir 'test_resources'
        }
    }
}

task generateBuildMetadata(type: GenerateBuildMetadata) {
    packageName = 'org.bitbucket.mlopatkin.android.logviewer'
    className = 'BuildInfo'
    into = file(metadataBuildDir)
    version = project.version
}

compileJava.dependsOn(generateBuildMetadata)

idea.module.generatedSourceDirs += file(metadataBuildDir)

shadow.applicationDistribution.from(project.getProjectDir()) {
    include 'HISTORY', 'LICENSE', 'NOTICE', 'README'
}

// Treat warnings as errors
compileJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
}

// Tweak windows start script so it won't create console window.
// Based on https://stackoverflow.com/a/27472895/200754
// and http://mrhaki.blogspot.ru/2015/04/gradle-goodness-alter-start-scripts.html
startShadowScripts {
    def replaceJavaWithJavaW = {
        if (it.contains("java.exe")) {
            return it.replaceAll("java.exe", "javaw.exe")
        } else if (it.startsWith("\"%JAVA_EXE%\"")) {
            return "start \"\" /b " + it
        }
        return it
    }
    doLast {
        windowsScript.text = windowsScript
                .readLines()
                .collect(replaceJavaWithJavaW)
                .join('\r\n')
    }
}

shadowJar {
    // NOTICES and licenses are included into ours NOTICE file manually.
    // Maven metadata isn't necessary also.
    exclude '**/NOTICE'
    exclude '**/LICENSE'
    exclude 'META-INF/maven/**'

    // These annotations aren't needed in runtime
    dependencies {
        exclude(dependency('com.google.code.findbugs:jsr305'))
        exclude(dependency('org.checkerframework:checker-qual'))
        exclude(dependency('com.google.errorprone:error_prone_annotations'))
        exclude(dependency('com.google.j2objc:j2objc-annotations'))
        exclude(dependency('org.codehaus.mojo:animal-sniffer-annotations'))
    }
}

bitbucket {
    repository = 'android-log-viewer'
    username = project.hasProperty('bitbucket.user') ? project.property('bitbucket.user') : System.getenv('BITBUCKET_USER')
    applicationPassword = project.hasProperty('bitbucket.password') ? project.property('bitbucket.password') : System.getenv('BITBUCKET_PASSWORD')
}

bitbucketUpload {
    dependsOn distShadowZip
    fileToUpload = distShadowZip.archivePath
}
