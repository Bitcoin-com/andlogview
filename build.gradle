/*
 * Copyright 2015 Mikhail Lopatkin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'checkstyle'
    id 'idea'
    id 'application'
    id 'com.github.johnrengelman.shadow'
    id 'net.ltgt.errorprone'

    id 'name.mlopatkin.bitbucket'
    id 'com.diffplug.eclipse.apt'
}

repositories {
    jcenter()
    google()
}

def daggerVersion = '2.16'

dependencies {
    compile "com.google.dagger:dagger:${daggerVersion}"
    compile 'com.google.guava:guava:25.1-jre'
    compile 'com.google.code.gson:gson:2.8.5'
    compile 'log4j:log4j:1.2.17'
    compile 'net.sf.jopt-simple:jopt-simple:4.6'
    compile 'com.android.tools.ddms:ddmlib:26.1.3'

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.19.1'
    testCompile 'org.hamcrest:hamcrest-all:1.3'

    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"

    errorprone 'com.google.errorprone:error_prone_core:2.3.1'
    errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
}

import org.bitbucket.mlopatkin.android.logviewer.building.GenerateBuildMetadata

checkstyle {
    toolVersion = '8.11'
}

applicationName = 'logview'
version = '0.20-SNAPSHOT'
mainClassName = 'org.bitbucket.mlopatkin.android.logviewer.Main'

def javaVersion = JavaVersion.VERSION_1_8
sourceCompatibility = javaVersion
targetCompatibility = javaVersion // defaults to sourceCompatibility

// Like annotationProcessor. Note java/main instead of Gradle's usual main/java.
def metadataBuildDir = "$buildDir/generated/sources/metadata/java/main"

sourceSets {
    main {
        java {
            srcDir 'src'
            srcDir 'utils'
            srcDir metadataBuildDir
        }
        resources {
            srcDir 'resources'
        }
    }
    test {
        java {
            srcDir 'test'
        }
        resources {
            srcDir 'test_resources'
        }
    }
}

task generateBuildMetadata(type: GenerateBuildMetadata) {
    packageName = 'org.bitbucket.mlopatkin.android.logviewer'
    className = 'BuildInfo'
    into = file(metadataBuildDir)
    version = project.version
}

compileJava.dependsOn(generateBuildMetadata)

idea.module.generatedSourceDirs += file(metadataBuildDir)

// Treat warnings as errors
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation' << '-Werror'
    options.errorprone.errorproneArgs.addAll('-Xep:JavaLangClash:OFF')
}

// Configure distribution (archive creation).
distributions {
    main {
        // The application plugin resets main distribution basename to applicationName but I want to use it for shadow
        // configuration because it is the primary one. These tasks are disabled though.
        distributionBaseName = project.applicationName + '-noshadow'
    }
    shadow {
        distributionBaseName = project.applicationName
    }
}

// Using CopySpec.with(CopySpec) is the only way to add files into the distribution. Other approaches are:
// - old way of shadow.applicationDistribution no longer works after 2.0.0. The applicationDistribution from application
//   plugin still works though.
// - simply listing from/include in contents completely replaces the archive content
def additionalFiles = copySpec {
    from project.projectDir
    include 'HISTORY', 'LICENSE', 'NOTICE', 'README.md'
}

distributions.all { it.contents.with(additionalFiles) }

def disableTasks(String... taskNames) {
    for (String taskName : taskNames) {
        tasks.named(taskName).configure {
            it.enabled = false
        }
    }
}

// Disable tasks from application plugin
disableTasks(
        ApplicationPlugin.TASK_DIST_ZIP_NAME,
        ApplicationPlugin.TASK_DIST_TAR_NAME,
        ApplicationPlugin.TASK_START_SCRIPTS_NAME,
        'assembleDist',
        'installDist')

// TARs aren't shipped, so disable it
disableTasks('shadowDistTar')
// Modern gradle support in eclipse (Buildship) doesn't require this task but it is brought in by eclipse.apt plugin
disableTasks('eclipse')

// Tweak windows start script so it won't create console window.
// Based on https://stackoverflow.com/a/27472895/200754
// and http://mrhaki.blogspot.ru/2015/04/gradle-goodness-alter-start-scripts.html
startShadowScripts {
    def replaceJavaWithJavaW = {
        if (it.contains("java.exe")) {
            return it.replaceAll("java.exe", "javaw.exe")
        } else if (it.startsWith("\"%JAVA_EXE%\"")) {
            return "start \"\" /b " + it
        }
        return it
    }
    doLast {
        windowsScript.text = windowsScript
                .readLines()
                .collect(replaceJavaWithJavaW)
                .join('\r\n')
    }
}

shadowJar {
    // NOTICES and licenses are included into ours NOTICE file manually.
    // Maven metadata isn't necessary also.
    exclude '**/NOTICE'
    exclude '**/LICENSE'
    exclude 'META-INF/maven/**'

    // These annotations aren't needed in runtime
    dependencies {
        exclude(dependency('com.google.code.findbugs:jsr305'))
        exclude(dependency('org.checkerframework:checker-qual'))
        exclude(dependency('com.google.errorprone:error_prone_annotations'))
        exclude(dependency('com.google.j2objc:j2objc-annotations'))
        exclude(dependency('org.codehaus.mojo:animal-sniffer-annotations'))
    }
}

bitbucket {
    repository = 'android-log-viewer'
    username = project.hasProperty('bitbucket.user') ? project.property('bitbucket.user') : System.getenv('BITBUCKET_USER')
    applicationPassword = project.hasProperty('bitbucket.password') ? project.property('bitbucket.password') : System.getenv('BITBUCKET_PASSWORD')
}

bitbucketUpload {
    dependsOn shadowDistZip
    fileToUpload = shadowDistZip.archivePath
}

// Order of tasks is important or generated metadata sources will not be imported
eclipse.synchronizationTasks 'generateBuildMetadata', 'eclipseJdtApt', 'eclipseFactorypath', 'eclipseJdt'
